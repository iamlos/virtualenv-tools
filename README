
  -- virtualenv-tools

     This repository contains scripts we're using at Fireteam for our
     deployment of Python code.  We're using them in combination with
     salt to build code on one server on a self contained virtualenv
     and then move that over to the destination servers to run.

     Why not virtualenv --relocatable?

       For starters: because it does not work.  relocatable is very
       limited in what it does and it works at runtime instead of
       making the whole thing actually move to the new location.  We
       ran into a ton of issues with it and it is currently in the
       process of being phased out.

     Why would I want to use it?

       The main reason you want to use this is for build caching.  You
       have one folder where one virtualenv exists, you install the
       latest version of your codebase and all extensions in there, then
       you can make the virtualenv relocate to a target location, put it
       into a tarball, distribute it to all servers and done!

     Example flow:

       First time: create the build cache

         $ mkdir /tmp/build-cache
         $ virtualenv --distribute /tmp/build-cache

       Now every time you build:

         $ . /tmp/build-cache/bin/activate
         $ pip install YourApplication

       Build done, package up and copy to whatever location you want to have
       it.

       Once unpacked on the target server, use the virtualenv tools to
       update the paths and make the virtualenv magically work in the new
       location.  For instance we deploy things to a path with the
       hash of the commit in:

         $ virtualenv-tools --update-path /srv/your-application/<hash>

       To also update the Python executable in the virtualenv to the
       system one you can reinitialize it in one go:

         $ virtualenv-tools --reinitialize /srv/your-application/<hash>

    
     Compile once, deploy whereever.  Virtualenvs are completely self
     contained.  In order to switch the current version all you need to
     do is to relink the builds.


ROLLING DEBIAN PACKAGES:
# Get FPM if necessary:
gem install fpm

# Create deb package
From the virtualenv-tools source dir, run the following command with the new version number:
fpm -t deb -s python -n python-virtualenv-tools -m infra@prezi.com --prefix /usr/local/ --description "A set of tools for virtualenv" --url "http://github.com/prezi/virtualenv-tools" -v 1.1-0prezi3 --no-python-dependencies --python-bin /usr/bin/python2.6 --python-install-lib lib/python2.6/dist-packages setup.py

# Uploading the package
Copy the file to oam3, then run (remember to use the version you just created):
cp python-virtualenv-tools_1.1-0prezi3_all.deb /var/www/packages.prezi.com/pool/main/p/python-virtualenv-tools/
deb-s3-wrapper upload -b package-repository-private -p --codename=prezi-precise --arch=amd64 /var/www/packages.prezi.com/pool/main/p/python-virtualenv-tools/python-virtualenv-tools_1.1-0prezi3_all.deb
deb-s3-wrapper upload -b package-repository-private -p --codename=prezi-lucid --arch=amd64 /var/www/packages.prezi.com/pool/main/p/python-virtualenv-tools/python-virtualenv-tools_1.1-0prezi3_all.deb

# Changing the version to use in Chef
add action: upgrade to the package def in chef
